set nocompatible               " be iMproved

filetype off                   " required!

call plug#begin('~/.vim/plugged')

Plug 'luochen1990/rainbow'
Plug 'liuchengxu/vista.vim'

"" Python
"Plug 'fs111/pydoc.vim'
Plug 'davidhalter/jedi-vim'

Plug 'fatih/vim-go'

" Git
"" Show what has changed in the sidebar + ability to stage, revert hunks
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

"" HTML
Plug 'gregsexton/MatchTag'

Plug 'stephpy/vim-yaml'
"" css
Plug 'cakebaker/scss-syntax.vim'

Plug 'ekalinin/Dockerfile.vim'

Plug 'AndrewRadev/splitjoin.vim'
Plug 'w0rp/ale'
Plug 'tpope/vim-surround'
Plug 'machakann/vim-sandwich'
Plug 'jiangmiao/auto-pairs'

"" Navigation
Plug 'scrooloose/nerdtree'

Plug 'Shougo/denite.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

Plug 'mhartington/oceanic-next'

" Initialize plugin system
call plug#end()

filetype plugin indent on
silent! helptags ALL

set antialias
syntax on

let mapleader=" "

set noerrorbells visualbell t_vb=
if has("gui_running")
    "set guifont=Monospace:h12

    " remove menu and toolbar
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R
endif

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

" Enable true color 启用终端24位色
" let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
" let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
" set termguicolors

let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

"let g:oceanic_next_terminal_bold = 1
"let g:oceanic_next_terminal_italic = 1
colorscheme OceanicNext
hi jsonTrailingCommaError gui=undercurl guisp=red ctermbg=52 term=undercurl cterm=undercurl

inoremap jj <ESC>
inoremap jk <ESC>
nnoremap ; :
nnoremap <Left> <nop>
nnoremap <Right> <nop>
nnoremap <Up> <nop>
nnoremap <Down> <nop>

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Vertical split
noremap <leader>vs :vsplit<CR>
noremap <leader>hs :split<CR>
" Open NerdTree
noremap <leader>n :NERDTreeToggle<CR>
" Clear highlight
noremap <leader>/ :nohlsearch<CR>
vnoremap // y/<C-R>"<CR>
" create taglist
noremap <leader>gt :!ctags --extra=+f --exclude=.git --exclude=log -R * `rvm gemdir`/gems/*<CR><CR>
" edit vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" source vimrc
nnoremap <leader>sv :so $MYVIMRC<CR>

nnoremap <leader>dq viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>q viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>q= viw<esc>a %><esc>hbi<%= <esc>lel
nnoremap <leader>q% viw<esc>a %}<esc>hbi{% <esc>lel



autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

nnoremap <silent> ,g :<C-u>Denite grep<CR>
nnoremap <silent> ,b :<C-u>Denite buffer<CR>
nnoremap <silent> <C-p> :<C-u>Denite file/rec<CR>

" Pt command on grep source
call denite#custom#var('grep', 'command', ['grep'])
call denite#custom#var('grep', 'default_opts', ['-inH'])
call denite#custom#var('grep', 'recursive_opts', ['-r'])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

let ignore=&wildignore .
        \ ',*.pyc,.git,.hg,.svn,venv,*.sw[o|p]'
call denite#custom#var('file/rec', 'command',
    \ ['scantree.py', '--path', ':directory',
    \  '--ignore', ignore])

let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_function_arguments = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments = 1
let g:go_fmt_command = "goimports"
let g:go_info_mode = 'guru'

let g:ale_linters = {
\   'go': ['golangci-lint', 'gofmt', 'go build', 'gosimple'],
\   'python': ['flake8', 'pylint'],
\   'javascript': ['prettier', 'eslint'],
\}
let g:ale_fixers = {'python': ['yapf']}
let g:ale_go_golangci_lint_options = "--fast"
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_lint_on_enter = 0
" let g:ale_lint_on_save = 1
let g:jedi#force_py_version=3


set number
" Moving Around/Editing
set cursorline              " have a line indicate the cursor location
set nostartofline           " Avoid moving cursor to BOL when jumping around
set scrolloff=3             " Keep 3 context lines above and below the cursor
set backspace=2             " Allow backspacing over autoindent, EOL, and BOL
set showmatch               " Briefly jump to a parent once it's balanced
set nowrap                  " don't wrap lines
set autoindent              " always set autoindenting on
set smartindent             " use smart indent if there is no indent file
set tabstop=4               " <tab> inserts 4 spaces
set shiftwidth=4            " but an indent level is 2 spaces wide.
set softtabstop=4           " <BS> over an autoindent deletes both spaces.
set expandtab               " Use spaces, not tabs, for autoindent/tab key.
set shiftround              " rounds indent to a multiple of shiftwidth
set matchpairs+=<:>         " show matching <> (html mainly) as well
set foldlevel=99            " don't fold by default
set completeopt=menu,menuone
set splitbelow
set splitright
"some stuff to get the mouse going in term
set mouse=a

""Messages, Info, Status
set ls=2                    " always show status line
set confirm                 " Y-N-C prompt if closing with unsaved changes.
set showcmd                 " Show incomplete normal mode commands as I type.
set report=0                " : commands always print changed line count.
set shortmess+=a            " Use [+]/[RO]/[w] for modified/readonly/written.
set ruler                   " Show some info, even without statuslines.
set laststatus=2            " Always show statusline, even if only 1 window.

""status
set statusline=(%n)
set statusline+=[%f]       "tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}] "file format
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag
set statusline+=%y      "filetype
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file

" displays tabs with :set list & displays when a line runs off-screen
set listchars=tab:❘-,trail:·,extends:»,precedes:«,nbsp:×
set fillchars=diff:⣿,vert:│
set list

" Searching and Patterns
set ignorecase              " Default to using case insensitive searches,
set smartcase               " unless uppercase letters are used in the regex.
set smarttab                " Handle tabs more intelligently
set hlsearch                " Highlight searches by default.
set incsearch               " Incrementally search while typing a /regex

augroup python
  au!
  "au FileType python set omnifunc=pythoncomplete#Complete
  au FileType python setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
  au BufRead python set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\
augroup END

augroup ruby
  au!
  au Filetype ruby setlocal tabstop=2 softtabstop=2 shiftwidth=2 smartindent cinwords=if,elsif,else,unless,for,while,begin,rescue,def,class,module
augroup END

augroup js
  au!
  au FileType javascript setlocal expandtab shiftwidth=3 tabstop=2 softtabstop=2
  au FileType javascript set omnifunc=javascriptcomplete#CompleteJS
augroup END

augroup html
  au!
  au FileType jade set omnifunc=javascriptcomplete#CompleteJS
  au FileType jade setlocal expandtab shiftwidth=2 softtabstop=2
  au FileType html set omnifunc=htmlcomplete#CompleteTags
  au FileType html setlocal expandtab shiftwidth=2 softtabstop=2
  au FileType css set omnifunc=csscomplete#CompleteCSS
  au FileType css setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2
  au FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
  au FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
  au Filetype scss setlocal tabstop=2 softtabstop=2 shiftwidth=2 smartindent
  au BufRead *.ejs set filetype=html
  au BufRead *.erb set filetype=html
  au BufNewFile,BufRead *.slim setlocal filetype=slim
augroup END

augroup golang
  au!
  au FileType go set expandtab!
  "au FileType go setlocal omnifunc=go#complete#Complete
  au FileType go set listchars=tab:\ \ 
  au FileType go hi SpecialKey guibg=NONE
augroup END

augroup git
  au!
  au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell
augroup END

augroup lisp
  au!
  au FileType lisp setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
augroup END
